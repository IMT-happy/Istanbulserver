/*
 Copyright (c) 2013, Yahoo! Inc.  All rights reserved.
 Copyrights licensed under the New BSD License. See the accompanying LICENSE file for terms.
 */
var istanbul = require('istanbul'),
    hook = istanbul.hook,
    Report = istanbul.Report,
    utils = istanbul.utils,
    Instrumenter = istanbul.Instrumenter,
    instrumenter = null,
    TreeSummarizer = istanbul.TreeSummarizer,
    baselineCoverage = {},
    path = require('path');

var MongoClient = require('mongodb').MongoClient;
var url = 'mongodb://localhost:27017';
const formatDate = require("./../utils/formatDate");

//single place to get global coverage object 获取覆盖率统计信息
function getCoverageObject() {
    /*jslint nomen: true */
    global.__coverage__ = global.__coverage__ || {};
    return global.__coverage__;
}

//returns a matcher that returns all JS files under root
//except when the file is anywhere under `node_modules`
//does not use istanbul.matcherFor() so as to expose
//a synchronous interface
function getRootMatcher(root) {
    return function (file) {
        if (file.indexOf(root) !== 0) { return false; }
        file = file.substring(root.length);
        if (file.indexOf('node_modules') >= 0) { return false; }
        return true;
    };
}

//deep-copy object
function clone(obj) {
    if (!obj) { return obj; }
    return JSON.parse(JSON.stringify(obj));
}
/**
 * save the baseline coverage stats for a file. This baseline is not 0
 * because of mainline code that is covered as part of loading the module
 * @method saveBaseline
 * @param file the file for which baseline stats need to be tracked.
 * @private
 */
function saveBaseline(file) {
    var coverageObject = getCoverageObject(),
        fileCoverage;
    if (coverageObject && coverageObject[file]) {
        fileCoverage = coverageObject[file];
        if (!baselineCoverage[file]) {
            baselineCoverage[file] = {
                s: clone(fileCoverage.s),
                f: clone(fileCoverage.f),
                b: clone(fileCoverage.b)
            };
        }
    }
}
/**
 * overwrites the coverage stats for the global coverage object to restore to baseline
 * @method restoreBaseline
 */
function restoreBaseline() {
    var cov = getCoverageObject(),
        fileCoverage,
        fileBaseline;
    Object.keys(baselineCoverage).forEach(function (file) {
        fileBaseline = baselineCoverage[file];
        if (cov[file]) {
            fileCoverage = cov[file];
            fileCoverage.s = clone(fileBaseline.s);
            fileCoverage.f = clone(fileBaseline.f);
            fileCoverage.b = clone(fileBaseline.b);
        }
    });
    Object.keys(cov).forEach(function (file) {
        if (!baselineCoverage[file]) { //throw it out
            delete cov[file];
        }
    });
}
/**
 * hooks `require` to add instrumentation to matching files loaded on the server
 * @method hookLoader
 * @param {Function|String} matcherOrRoot one of:
 *      a match function with signature `fn(file)` that returns true if `file` needs to be instrumented
 *      a root path under which all JS files except those under `node_modules` are instrumented
 * @param {Object} opts instrumenter options
 */
function hookLoader(matcherOrRoot, opts) {
    /*jslint nomen: true */
    var matcherFn,
        transformer,
        postLoadHook,
        postLoadHookFn;

    opts = opts || {};
    opts.coverageVariable = '__coverage__'; //force this always

    postLoadHook = opts.postLoadHook;
    if (!(postLoadHook && typeof postLoadHook === 'function')) {
        postLoadHook = function (/* matcher, transformer, verbose */) { return function (/* file */) { }; };
    }
    delete opts.postLoadHook;

    if (typeof matcherOrRoot === 'function') {
        matcherFn = matcherOrRoot;
    } else if (typeof matcherOrRoot === 'string') {
        matcherFn = getRootMatcher(matcherOrRoot);
    } else {
        throw new Error('Argument was not a function or string');
    }

    if (instrumenter) { return; } //already hooked
    instrumenter = new Instrumenter(opts);
    transformer = instrumenter.instrumentSync.bind(instrumenter);
    postLoadHookFn = postLoadHook(matcherFn, transformer, opts.verbose);

    hook.hookRequire(matcherFn, transformer, {
        verbose: opts.verbose,
        postLoadHook: function (file) {
            postLoadHookFn(file);
            saveBaseline(file);
        }
    });
}

function getTreeSummary(collector) {
    var summarizer = new TreeSummarizer();
    collector.files().forEach(function (key) {
        summarizer.addFileCoverageSummary(key, utils.summarizeFileCoverage(collector.fileCoverageFor(key)));
    });
    return summarizer.getTreeSummary();
}

function getPathMap(treeSummary) {
    var ret = {};

    function walker(node) {
        ret[node.fullPath()] = node;
        node.children.forEach(function (child) {
            walker(child);
        });
    }
    walker(treeSummary.root);
    return ret;
}

// E:\coveragewithweb\app\server\  ,  res  ,  /bilibili/webcoverage
function render(filePath, res, prefix, versionname) {
    var collector = new istanbul.Collector(),
        treeSummary,
        pathMap,
        linkMapper,
        outputNode,
        report,
        coverage,
        fileCoverage;
    // coverage = getCoverageObject();  // 查询已经处理后的覆盖率信息
    //  这边的覆盖率信息可以从库中读取，指定访问地址，查询校验  webvideopakageistanbul-1.0
    try {
        if (versionname) {
            // console.log('进来了1111111111', 'versionname: ', versionname)
            // const resultdata = searchcoveragedata(versionname)
            MongoClient.connect(url, { useNewUrlParser: true, useUnifiedTopology: true }, function (err, db) {
                if (err) throw err;
                var dbo = db.db("webcoverage");
                var mysort = { Date: -1 };
                var whereStr = { name: versionname };
                dbo.collection('activitycoverage').find(whereStr).sort(mysort).toArray(function (err, result) {
                    if (err) {
                        return err;
                    } else {
                        if (result.length > 0) {
                            var coverage = JSON.parse(result[0].coverage)
                        } else {
                            var coverage = {}
                        }
                        if (!(coverage && Object.keys(coverage).length > 0)) {
                            res.setHeader('Content-type', 'text/plain');
                            return res.end('No coverage information has been collected'); //TODO: make this a fancy HTML report
                        }
                        prefix = prefix || '';
                        if (prefix.charAt(prefix.length - 1) !== '/') {  // 处理路径，路径后面跟目录路径指示
                            prefix += '/';
                        }
                        utils.removeDerivedInfo(coverage);
                        collector.add(coverage); // 覆盖率收集容器
                        treeSummary = getTreeSummary(collector); //  处理覆盖率的树信息，filepath，filename，fileinfo ...
                        // console.log(treeSummary)
                        pathMap = getPathMap(treeSummary);  // 处理每个不同路下的覆盖信息 将全部的分类，收集存入数组
                        // console.log(treeSummary)
                        filePath = filePath || treeSummary.root.fullPath();  // 如果没有指定路径查找相关的覆盖信息，就展示全量的数据
                        outputNode = pathMap[filePath]; // 如果有具体的搜索参数，则在数组中找对应的对象 返回node节点信息
                        if (!outputNode) {  // 查询路径下不存在相关信息 处理
                            res.statusCode = 404;
                            return res.end('No coverage for file path [' + filePath + ']');
                        }
                        linkMapper = {
                            hrefFor: function (node) {
                                return 'https://10.23.176.55:8988' + prefix + 'show?p=' + node.fullPath();
                            },
                            fromParent: function (node) {
                                return this.hrefFor(node);
                            },
                            ancestor: function (node, num) {
                                var i;
                                for (i = 0; i < num; i += 1) {
                                    node = node.parent;
                                }
                                return this.hrefFor(node);
                            },
                            asset: function (node, name) { // 资源文件处理 resource files 
                                return 'https://10.23.176.55:8988' + prefix + 'asset/' + name;
                            }
                        };
                        report = Report.create('html', { linkMapper: linkMapper });  // 处理最终的报告
                        res.setHeader('Content-type', 'text/html');
                        if (outputNode.kind === 'dir') {
                            report.writeIndexPage(res, outputNode);
                        } else {
                            fileCoverage = coverage[outputNode.fullPath()];
                            utils.addDerivedInfoForFile(fileCoverage);
                            report.writeDetailPage(res, outputNode, fileCoverage);
                        }
                        return res.end();
                    }
                });
            });
        } else {
            var flag = filePath.includes('\\')
            var currentfilepath, index, num, filesplitarr
            if (flag) {
                filesplitarr = filePath.split('\\')
                index = filesplitarr.findIndex(item => item === 'src');
                num = index - 1
                currentfilepath = filesplitarr[num]
            } else {
                filesplitarr = filePath.split('/')
                index = filesplitarr.findIndex(item => item === 'src');
                num = index - 1
                currentfilepath = filesplitarr[num]
            }
            MongoClient.connect(url, { useNewUrlParser: true, useUnifiedTopology: true }, function (err, db) {
                if (err) throw err;
                var dbo = db.db("webcoverage");
                var mysort = { Date: -1 };
                var whereStr = { name: currentfilepath };
                dbo.collection('activitycoverage').find(whereStr).sort(mysort).toArray(function (err, result) {
                    if (err) {
                        return err;
                    } else {
                        if (result.length > 0) {
                            var coverage = JSON.parse(result[0].coverage)
                        } else {
                            var coverage = {}
                        }
                        if (!(coverage && Object.keys(coverage).length > 0)) {
                            res.setHeader('Content-type', 'text/plain');
                            return res.end('No coverage information has been collected'); //TODO: make this a fancy HTML report
                        }
                        prefix = prefix || '';
                        if (prefix.charAt(prefix.length - 1) !== '/') {  // 处理路径，路径后面跟目录路径指示
                            prefix += '/';
                        }
                        utils.removeDerivedInfo(coverage);
                        collector.add(coverage); // 覆盖率收集容器
                        treeSummary = getTreeSummary(collector); //  处理覆盖率的树信息，filepath，filename，fileinfo ...
                        // console.log(treeSummary)
                        pathMap = getPathMap(treeSummary);  // 处理每个不同路下的覆盖信息 将全部的分类，收集存入数组
                        // console.log(treeSummary)
                        filePath = filePath || treeSummary.root.fullPath();  // 如果没有指定路径查找相关的覆盖信息，就展示全量的数据
                        outputNode = pathMap[filePath]; // 如果有具体的搜索参数，则在数组中找对应的对象 返回node节点信息
                        if (!outputNode) {  // 查询路径下不存在相关信息 处理
                            res.statusCode = 404;
                            return res.end('No coverage for file path [' + filePath + ']');
                        }
                        linkMapper = {
                            hrefFor: function (node) {
                                return 'https://10.23.176.55:8988' + prefix + 'show?p=' + node.fullPath();
                            },
                            fromParent: function (node) {
                                return this.hrefFor(node);
                            },
                            ancestor: function (node, num) {
                                var i;
                                for (i = 0; i < num; i += 1) {
                                    node = node.parent;
                                }
                                return this.hrefFor(node);
                            },
                            asset: function (node, name) { // 资源文件处理 resource files 
                                return 'https://10.23.176.55:8988' + prefix + 'asset/' + name;
                            }
                        };
                        report = Report.create('html', { linkMapper: linkMapper });  // 处理最终的报告
                        res.setHeader('Content-type', 'text/html');
                        if (outputNode.kind === 'dir') {
                            report.writeIndexPage(res, outputNode);
                        } else {
                            fileCoverage = coverage[outputNode.fullPath()];
                            utils.addDerivedInfoForFile(fileCoverage);
                            report.writeDetailPage(res, outputNode, fileCoverage);
                        }
                        return res.end();
                    }
                });
            });
        }
    } catch (e) {
        res.send({ '请查找具体的指令，name关键字： ': e });
    }
}


function mergeClientCoverage(obj, filename) { // resolve coverage datas  这边传进来的就是 coverage的 window.coverage 信息 
    if (!obj) { return; }
    // console.log(Object.keys(obj)[0])
    // restoreBaseline()
    var newfilename = Object.keys(obj)[0]
    var flag = newfilename.includes('\\')
    var currentfilepath, index, num, filesplitarr
    if (flag) {
        filesplitarr = newfilename.split('\\')
        index = filesplitarr.findIndex(item => item === 'src');
        num = index - 1
        currentfilepath = filesplitarr[num]
    } else {
        filesplitarr = newfilename.split('/')
        index = filesplitarr.findIndex(item => item === 'src');
        num = index - 1
        currentfilepath = filesplitarr[num]
    }
    // console.log(currentfilepath)
    var coverage = getCoverageObject();  // 初始状态下的coverage 覆盖信息
    var newobj = {}
    // console.log('newobj', newobj)
    Object.keys(obj).forEach(function (filePath) { //  遍历传进来的文件，做覆盖率信息转换  E:/coveragenewtamp/jinkela
        let oldfilepath = obj[filePath]
        let pathflag = filePath.startsWith('/')
        let needresolve = filePath.includes('istanbulserver')
        if (pathflag) {
            if (needresolve) {
                console.log('do not resolve')
            } else {
                var index = filePath.lastIndexOf("src");  // /  D:\\IMT-server\\
                filePath = 'E:\\coveragewithweb\\istanbulserver\\' + filename + filePath.substring(index - 1, filePath.length).replace(/\//g, '\\');
                newobj[filePath] = oldfilepath
                newobj[filePath].path = filePath
                var original = coverage[filePath], // filepath = key 即文件路径  E:\\coveragewithweb\\app\\server\\index.js || original 是已经存在的数据
                    added = newobj[filePath],  // added 最新的覆盖率信息数据
                    result;  // 定义一个预备内存
                if (original) {
                    result = utils.mergeFileCoverage(original, added);
                } else {
                    result = added;
                }
                coverage[filePath] = result;  // 最终的覆盖率信息 存放到临时内存！ getCoverageObject()
            }
        } else {
            var original = coverage[filePath], // filepath = key 即文件路径  E:\\coveragewithweb\\app\\server\\index.js || original 是已经存在的数据
                added = obj[filePath],  // added 最新的覆盖率信息数据
                result;  // 定义一个预备内存
            if (original) {
                result = utils.mergeFileCoverage(original, added);
            } else {
                result = added;
            }
            coverage[filePath] = result;  // 最终的覆盖率信息 存放到临时内存！ getCoverageObject()
        }
    });
    var myobj =
    {
        name: currentfilepath,
        coverage: JSON.stringify(newobj),
        Date: formatDate(new Date()),
    }
    try {
        MongoClient.connect(url, { useNewUrlParser: true, useUnifiedTopology: true }, function (err, db) {
            if (err) throw err;
            var dbo = db.db("webcoverage");
            var mysort = { Date: -1 };
            var whereStr = { name: currentfilepath };
            dbo.collection('activitycoverage').find(whereStr).sort(mysort).toArray(function (err, result) {
                if (err) {
                    return err;
                } else {
                    if (result.length > 0) {
                        MongoClient.connect(url, { useNewUrlParser: true, useUnifiedTopology: true }, function (err, db) {
                            if (err) throw err;
                            var dbo = db.db("webcoverage");
                            var whereStr = { name: currentfilepath };  // 查询条件
                            var updateStr = { $set: { "coverage": JSON.stringify(coverage) } };
                            dbo.collection('activitycoverage').updateOne(whereStr, updateStr, function (err, result) {
                                if (err) {
                                    return err;
                                } else {
                                    console.log(currentfilepath, " --- 覆盖率数据更新成功");
                                    db.close();
                                }
                            });
                        });
                    } else {

                        MongoClient.connect(url, { useNewUrlParser: true, useUnifiedTopology: true }, function (err, db) {
                            if (err) throw err;
                            var dbo = db.db("webcoverage");
                            dbo.collection("activitycoverage").insertOne(myobj, function (err, res) {
                                if (err) throw err;
                                console.log(currentfilepath, " --- 覆盖率数据插入成功");
                                db.close();
                            });
                        });
                    }
                }
            });
        });
    } catch (e) {
        console.log(e)
    }
    // coverage 是最终的覆盖率信息，每次进行存储，用key值来关联，key指向业务版本
}


module.exports = {
    getCoverageObject: getCoverageObject,
    getInstrumenter: function () { return instrumenter; },
    restoreBaseline: restoreBaseline,
    hookLoader: hookLoader,
    render: render,
    mergeClientCoverage: mergeClientCoverage
};


